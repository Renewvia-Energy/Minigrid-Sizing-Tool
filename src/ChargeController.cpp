#ifndef CHARGECONTROLLER_CPP
#define CHARGECONTROLLER_CPP

#include <vector>
#include <utility>
#include "../include/Napps.h"
#include "PVInverterCC.h"

class ChargeController : public PVInverterCC<ChargeController> {
	private:
		const double batteryChargeCurrent;

	protected:
		PVInverterCC<ChargeController>* clone_impl() const override {
			return new ChargeController(*this);
		}

	public:
		/**
		 * A DC-coupled power generation device.
		 * 
		 * @param batteryChargeCurrent The maximum output current of the device.
		 * @param maxPVPower The maximum Pmp of all solar panels connected to the device.
		 * @param pvInputs Array of PV inputs of the device. Each PV input should be connected to a single subarray. 
		 * @param price The unit price of the device. 
		 */
		ChargeController(double batteryChargeCurrent, double maxPVPower, std::vector<std::unique_ptr<PVInput>> pvInputs, double price)
			: PVInverterCC(std::move(pvInputs), maxPVPower, price),
			  batteryChargeCurrent(batteryChargeCurrent) {}

		// Destructor
		~ChargeController() override = default;

		// Copy constructor
		ChargeController(const ChargeController& other)
			: PVInverterCC(
			  	napps::copy_unique_ptr_vector(other.getPVInputs()),
				other.getMaxPVPower(), other.getPrice()),
			  batteryChargeCurrent(other.getBatteryChargeCurrent()) {}

		// Copy assignment operator
		ChargeController& operator=(const ChargeController& other) = delete;

		// Move constructor
		ChargeController(ChargeController&& other) = default;

		// Move assignment operator
		ChargeController& operator=(ChargeController&& other) = delete;

		// Getters
		double getBatteryChargeCurrent() const { return batteryChargeCurrent; }

		/**
		 * Energy generated by the subarrays connected to the device.
		 * 
		 * @param dcArrayOutputWhPerWp Amount of energy [Wh] a 1-Wp panel could output during the time interval.
		 * @param outputVoltage The DCV of the powerhouse.
		 * @param dt The time interval [hr]
		 * @returns Amount of energy [Wh] output by the device over the time interval.
		 */
		double getEnergy(double dcArrayOutputWhPerWp, double outputVoltage, double dt) const override {
			double energy = std::min(getUnlimitedEnergy(dcArrayOutputWhPerWp), outputVoltage*batteryChargeCurrent*dt);
			assert(energy>=0 && "Energy produced by CC must be >=0.");
			return energy;
		}
};

#endif // CHARGECONTROLLER_CPP