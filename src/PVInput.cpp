#include <vector>
#include "Subarray.cpp"

class PVInput {
	private:
		double Voc_min;
		double Voc_max;
		double Vmp_min;
		double Vmp_max;
		double Isc_max;
		double Imp_max;
		double price;
		Subarray* subarray;

	public:
		/**
		 * An input into a PV inverter or charge controller. Is connected to exactly one PV subarray.
		 * 
		 * @param {number} Voc_min - Minimum open-circuit voltage allowed of a connected subarray. The sum of the Vocs of all the panels in a string should be greater than or equal to this value. 
		 * @param {number} Voc_max - Maximum open-circuit voltage allowed of a connected subarray.
		 * @param {number} Vmp_min - Minimum maximum-power voltage allowed of a connected subarray. 
		 * @param {number} Vmp_max - Maximum maximum-power voltage allowed of a connected subarray.
		 * @param {number} Isc_max - Maximum short-circuit current allowed of a connected subarray. The sum of the Iscs of all the strings in a subarray should be less than or equal to this value.
		 * @param {number} Imp_max - Maximum maximum-power current allowed of a connected subarray.
		 * @constructor 
		 */
		PVInput(double Voc_min, double Voc_max, double Vmp_min, double Vmp_max, double Isc_max, double Imp_max) : Voc_min(Voc_min), Voc_max(Voc_max), Vmp_min(Vmp_min), Vmp_max(Vmp_max), Isc_max(Isc_max), Imp_max(Imp_max), price(0), subarray(nullptr) {}

		/**
		 * Connect a single subarray of panels to this PV input. Check to make sure the subarray specs, Voc, Vmp, Isc, and Imp, are within the parameters of the PV input.
		 * 
		 * @param {Subarray} subarray - The subarray to connect to the PV input.
		 * @throws An error if any of the subarray parameters, Voc, Vmp, Isc, or Imp, are outside the acceptable bounds of this PV input.
		 */
		void connectSubarray(Subarray* newSubarray) {
			subarray = newSubarray;

			if (subarray->getVoc() < Vmp_min || subarray->getVoc() > Vmp_max) {
				throw std::runtime_error("Subarray Voc " + std::to_string(subarray->getVoc()) + " is outside the bounds [" + std::to_string(Voc_min) + "," + std::to_string(Voc_max) + "]");
			}
			if (subarray->getVmp() < Vmp_min || subarray->getVmp() > Vmp_max) {
				throw std::runtime_error("Subarray Vmp " + std::to_string(subarray->getVmp()) + " is outside the bounds [" + std::to_string(Vmp_min) + "," + std::to_string(Vmp_max) + "]");
			}
			if (subarray->getIsc() > Isc_max) {
				throw std::runtime_error("Subarray Isc " + std::to_string(subarray->getIsc()) + " is greater than the PV input Isc_max " + std::to_string(Isc_max));
			}
			if (subarray->getImp() > Imp_max) {
				throw std::runtime_error("Subarray Imp " + std::to_string(subarray->getImp()) + " is greater than the PV input Imp_max " + std::to_string(Imp_max));
			}

			price = subarray->getPrice();
		}

		PVInput copy() const {
			Subarray copiedSubarray = *subarray->copy();	// Equavalent to *(subarray->copy())
			PVInput copiedPVInput = PVInput(Voc_min, Voc_max, Vmp_min, Vmp_max, Isc_max, Imp_max);
			copiedPVInput.connectSubarray(&copiedSubarray);
			return copiedPVInput;
		}

		// Getters
		double getPrice() const { return price; }
		double getPmp() const { return subarray->getPmp();}

		/**
		 * Energy generated by the subarray connected to this PV inverter
		 * 
		 * @param {number} dcArrayOutputWhPerWp - Amount of energy [Wh] a 1-Wp panel could output during the time interval.
		 * @returns {number} Amount of energy [Wh] produced by the subarray connected to this PV input over the time interval.
		 */
		double getEnergy(double dcArrayOutputWhPerWp) const {
			return subarray->getEnergy(dcArrayOutputWhPerWp);
		}
};