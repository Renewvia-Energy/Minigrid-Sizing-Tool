#ifndef PVINPUT_CPP
#define PVINPUT_CPP

#include <vector>
#include <memory>
#include "Subarray.cpp"

class PVInput {
	private:
		const double Voc_min;
		const double Voc_max;
		const double Vmp_min;
		const double Vmp_max;
		const double Isc_max;
		const double Imp_max;
		std::unique_ptr<Subarray> subarray;

	public:
		/**
		 * An input into a PV inverter or charge controller. Is connected to exactly one PV subarray.
		 * 
		 * @param Voc_min Minimum open-circuit voltage allowed of a connected subarray. The sum of the Vocs of all the panels in a string should be greater than or equal to this value. 
		 * @param Voc_max Maximum open-circuit voltage allowed of a connected subarray.
		 * @param Vmp_min Minimum maximum-power voltage allowed of a connected subarray. 
		 * @param Vmp_max Maximum maximum-power voltage allowed of a connected subarray.
		 * @param Isc_max Maximum short-circuit current allowed of a connected subarray. The sum of the Iscs of all the strings in a subarray should be less than or equal to this value.
		 * @param Imp_max Maximum maximum-power current allowed of a connected subarray.
		 */
		PVInput(double Voc_min, double Voc_max, double Vmp_min, double Vmp_max, double Isc_max, double Imp_max) : Voc_min(Voc_min), Voc_max(Voc_max), Vmp_min(Vmp_min), Vmp_max(Vmp_max), Isc_max(Isc_max), Imp_max(Imp_max), subarray(nullptr) {}

		/**
		 * Connect a single subarray of panels to this PV input. Check to make sure the subarray specs, Voc, Vmp, Isc, and Imp, are within the parameters of the PV input.
		 *
		 * @param newSubarray The subarray to connect to the PV input.
		 *
		 * @throws std::runtime_error if any of the subarray parameters, Voc, Vmp, Isc, or Imp, are outside the acceptable bounds of this PV input.
		 */
		void connectSubarray(std::unique_ptr<Subarray> newSubarray) {
			subarray = std::move(newSubarray);

			if (subarray->getVoc() < Vmp_min || subarray->getVoc() > Vmp_max) {
				throw std::runtime_error("Subarray Voc " + std::to_string(subarray->getVoc()) + " is outside the bounds [" + std::to_string(Voc_min) + "," + std::to_string(Voc_max) + "]");
			}
			if (subarray->getVmp() < Vmp_min || subarray->getVmp() > Vmp_max) {
				throw std::runtime_error("Subarray Vmp " + std::to_string(subarray->getVmp()) + " is outside the bounds [" + std::to_string(Vmp_min) + "," + std::to_string(Vmp_max) + "]");
			}
			if (subarray->getIsc() > Isc_max) {
				throw std::runtime_error("Subarray Isc " + std::to_string(subarray->getIsc()) + " is greater than the PV input Isc_max " + std::to_string(Isc_max));
			}
			if (subarray->getImp() > Imp_max) {
				throw std::runtime_error("Subarray Imp " + std::to_string(subarray->getImp()) + " is greater than the PV input Imp_max " + std::to_string(Imp_max));
			}
		}

		// Destructor
		~PVInput() = default;

		// Copy constructor
		PVInput(const PVInput& pvInput) : PVInput(pvInput.Voc_min, pvInput.Voc_max, pvInput.Vmp_min, pvInput.Vmp_max, pvInput.Isc_max, pvInput.Imp_max) {
			connectSubarray(pvInput.subarray->clone());
		}

		// Copy assignment operator
		PVInput& operator=(const PVInput& pvInput) = delete;

		// Move constructor
		PVInput(PVInput&& pvInput) = default;

		std::unique_ptr<PVInput> clone() const {
			return std::make_unique<PVInput>(*this);
		}

		// Getters
		double getPrice() const { return subarray->getPrice(); }
		double getPmp() const { return subarray->getPmp();}

		/**
		 * Energy generated by the subarray connected to this PV inverter
		 * 
		 * @param dcArrayOutputWhPerWp Amount of energy [Wh] a 1-Wp panel could output during the time interval.
		 * @returns Amount of energy [Wh] produced by the subarray connected to this PV input over the time interval.
		 */
		double getEnergy(double dcArrayOutputWhPerWp) const {
			return subarray->getEnergy(dcArrayOutputWhPerWp);
		}
};

#endif // PVINPUT_H