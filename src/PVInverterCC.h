#ifndef PVINVERTERCC_H
#define PVINVERTERCC_H

#include <vector>
#include "PVInput.cpp"

class PVInverterCC {
	private:
		std::vector<PVInput> pvInputs;
		double maxPVPower;
		double price;
		double subarrayPrice;

	public:
		/**
		 * A customer archetype and quantity.
		 *
		 * @param {Array<PVInput>} pvInputs - Array of PVInputs of device.
		 * @param {number} maxPVPower - Maximum PV generator power [Wp].
		 * @param {number} price - Price of device [$].
		 * @constructor
		 */
		PVInverterCC(std::vector<PVInput> pvInputs, double maxPVPower, double price) : pvInputs(pvInputs), maxPVPower(maxPVPower), price(price), subarrayPrice(0) {
			double Pmp = 0;
			for (const auto& pvInput : pvInputs) {
				subarrayPrice+= pvInput.getPrice();
				Pmp+= pvInput.getPmp();
			}
			if (Pmp>maxPVPower) {
				throw std::runtime_error("Too much PV input power connected. " + std::to_string(Pmp) + ">" + std::to_string(maxPVPower));
			}
		}

		virtual ~PVInverterCC() = default;

		virtual PVInverterCC* copy() const = 0;
		
		// Getters
		std::vector<PVInput> getPVInputs() const { return pvInputs; }
		double getMaxPVPower() const { return maxPVPower; }
		double getPrice() const { return price; }
		double totalPrice() const { return subarrayPrice + price; }

		/**
		 * The amount of energy [Wh] that could be generated by the attached PV if the PVInverterCC had no output power limit.
		 * 
		 * @param {number} dcArrayOutputWhPerWp - Amount of energy [Wh] a 1-Wp panel could output during the time interval.
		 * @returns {number}
		 */
		double getUnlimitedEnergy(double dcArrayOutputWhPerWp) const {
			double energy = std::accumulate(pvInputs.begin(), pvInputs.end(), 0.0, [dcArrayOutputWhPerWp](double sum, const PVInput& pvInput) {
				return sum + pvInput.getEnergy(dcArrayOutputWhPerWp);
			});
			assert(energy>=0 && "Energy generated by panel should be nonnegative.");
			return energy;
		}

		/**
		 * Energy [Wh] generated by the subarray connected to this PV inverter. In the abstract class, this will throw an error. This method must be implemented in the subclass.
		 * 
		 * @param {number} dcArrayOutputWhPerWp - Amount of energy [Wh] a 1-Wp panel could output during the time interval.
		 * @param {number} outputVoltage - The voltage of the output of the PV inverter or charge controller. For a PV inverter, this will be the VAC of LV in the country of operation. For a charge controller, this will be the DCV of the powerhouse.
		 * @param {number} dt - The time interval [hr]
		 * @returns {number}
		 * @throws An error if called. You must re-implement this in the subclass.
		 */
		virtual double getEnergy(double dcArrayOutputWhPerWp, double outputVoltage, double dt) const = 0;
};

#endif // PVINVERTERCC_H