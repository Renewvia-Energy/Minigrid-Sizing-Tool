#include <vector>
#include "Subarray.cpp"

class PVInput {
	private:
		double Voc_min;
		double Voc_max;
		double Vmp_min;
		double Vmp_max;
		double Isc_max;
		double Imp_max;
		double price;
		Subarray subarray;

	public:
		PVInput(double Voc_min, double Voc_max, double Vmp_min, double Vmp_max, double Isc_max, double Imp_max) : Voc_min(Voc_min), Voc_max(Voc_max), Vmp_min(Vmp_min), Vmp_max(Vmp_max), Isc_max(Isc_max), Imp_max(Imp_max), price(0), subarray(nullptr) {}

	/**
	 * An input into a PV inverter or charge controller. Is connected to exactly one PV subarray.
	 * 
	 * @param {number} Voc_min - Minimum open-circuit voltage allowed of a connected subarray. The sum of the Vocs of all the panels in a string should be greater than or equal to this value. 
	 * @param {number} Voc_max - Maximum open-circuit voltage allowed of a connected subarray.
	 * @param {number} Vmp_min - Minimum maximum-power voltage allowed of a connected subarray. 
	 * @param {number} Vmp_max - Maximum maximum-power voltage allowed of a connected subarray.
	 * @param {number} Isc_max - Maximum short-circuit current allowed of a connected subarray. The sum of the Iscs of all the strings in a subarray should be less than or equal to this value.
	 * @param {number} Imp_max - Maximum maximum-power current allowed of a connected subarray.
	 * @constructor 
	 */
	constructor(Voc_min: number, Voc_max: number, Vmp_min: number, Vmp_max: number, Isc_max: number, Imp_max: number) {
		this.#Voc_min = Voc_min
		this.#Voc_max = Voc_max
		this.#Vmp_min = Vmp_min
		this.#Vmp_max = Vmp_max
		this.#Isc_max = Isc_max
		this.#Imp_max = Imp_max
		this.#price = 0
	}

	/**
	 * Connect a single subarray of panels to this PV input. Check to make sure the subarray specs, Voc, Vmp, Isc, and Imp, are within the parameters of the PV input.
	 * 
	 * @param {Subarray} subarray - The subarray to connect to the PV input.
	 * @throws An error if any of the subarray parameters, Voc, Vmp, Isc, or Imp, are outside the acceptable bounds of this PV input.
	 */
	connectSubarray(subarray: Subarray): void {
		this.#subarray = subarray

		if (this.#subarray.Voc<this.#Voc_min || this.#subarray.Voc>this.#Voc_max) {
			throw new Error(`Subarray Voc ${this.#subarray.Voc} is outside the bounds [${this.#Voc_min},${this.#Voc_max}]`)
		}
		if (this.#subarray.Vmp<this.#Vmp_min || this.#subarray.Vmp>this.#Vmp_max) {
			throw new Error(`Subarray Vmp ${this.#subarray.Vmp} is outside the bounds [${this.#Vmp_min},${this.#Vmp_max}]`)
		}
		if (this.#subarray.Isc>this.#Isc_max) {
			throw new Error(`Subarray Isc ${this.#subarray.Isc} is greater than the charge controller Isc_max ${this.#Isc_max}`)
		}
		if (this.#subarray.Imp>this.#Imp_max) {
			throw new Error(`Subarray Imp ${this.#subarray.Imp} is greater than the charge controller Imp_max ${this.#Imp_max}`)
		}

		this.#price = this.#subarray.price
	}

	copy(): PVInput {
		var copiedSubarray: Subarray = this.#subarray.copy()
		var copiedPVInput: PVInput = new PVInput(this.#Voc_min, this.#Voc_max, this.#Vmp_min, this.#Vmp_max, this.#Isc_max, this.#Imp_max)
		copiedPVInput.connectSubarray(copiedSubarray)
		return copiedPVInput
	}

	get price() { return this.#price }
	get Pmp() { return this.#subarray.Pmp }

	/**
	 * Energy generated by the subarray connected to this PV inverter
	 * 
	 * @param {number} dcArrayOutputWhPerWp - Amount of energy [Wh] a 1-Wp panel could output during the time interval.
	 * @returns {number} Amount of energy [Wh] produced by the subarray connected to this PV input over the time interval.
	 */
	getEnergy(dcArrayOutputWhPerWp: number): number {
		var energy = this.#subarray.getEnergy(dcArrayOutputWhPerWp)
		return energy
	}
}